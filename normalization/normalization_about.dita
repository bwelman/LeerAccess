<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="normalization_about" xml:lang="nl-NL">
    <title>Over normaliseren</title>
    <shortdesc>Over het waarom van normaliseren en de notatiewijze van tabellen.</shortdesc>
    <prolog>
        <critdates>
            <created date="2017-10-05"/>
            <revised modified="2021-06-10"/>
        </critdates>
        <metadata>
            <keywords>
                <indexterm>Normaliseren</indexterm>
                <indexterm>Normaalvorm</indexterm>
                <indexterm>Redundantie</indexterm>
                <indexterm>Inconsistentie</indexterm>
                <indexterm>Primaire sleutel</indexterm>
                <indexterm>Sleutel<indexterm>primair</indexterm></indexterm>
            </keywords>
        </metadata>
    </prolog>
    <conbody>
        <p>In een database worden gegevens over een bepaald onderwerp (<term>entiteit</term>)
            bijgehouden. Dat opslaan van de gegevens zou in principe in één grote tabel kunnen, maar
            dat is niet erg efficiënt. Gebruikers hebben vaak een specifieke informatiebehoefte, ze
            willen slechts bepaalde gegevens zien die aan bepaalde voorwaarden voldoen. Het ontwerp
            moet er voor zorgen dat je aan de informatiebehoefte van de databasegebruiker kunt
            voldoen. Dat kan niet goed met één grote tabel. Ook het onderhoud van gegevens verloopt
            moeizaam in een dergelijke tabel.</p>
        <p>In een relationele database worden de gegevens gesplitst en in afzonderlijke tabellen
            ondergebracht. En deze tabellen worden met elkaar verbonden door middel van
            sleutelvelden. Hierdoor kun je gerelateerde gegevens uit verschillende tabellen
            opvragen. Hierbij is het van belang dat de gegevens goed over logisch samenhangende
            tabellen verdeeld zijn en dat de gegevens maar op één plaats worden opgeslagen, dus in
            één veld in één tabel. Als gegevens vaker dan keer wordt opgeslagen dan heet dat ook wel
                <term>redundantie</term>.</p>
        <p>Ook mogen gegevens niet tegenstrijdig (<term>inconsistent</term>) zijn. Een voorbeeld van
            dit laatste is de vermelding van een niet bestaand klantnummer in een tabel
            facturen.</p>
        <p>Om een record in een tabel te kunnen vinden moet dat record iets unieks hebben. Dit
            unieke is de inhoud van een bepaald veld (soms van meerdere velden samen) en wordt de
                <term>(primaire) sleutel</term> van de tabel genoemd.</p>
        <p>Een goed ontwerp van de database is van belang. En dit ontwerp maak je voordat je met de
            bouw van de database begint. Vergelijk het met de bouw van een huis waar de architect
            eerst een tekening maakt en pas dan gaat de aannemer het huis bouwen. Om tot een goed
            ontwerp te komen heeft de Britse informaticus Edgar Codd een ontwerptechniek bedacht die
            bekend staat onder de naam <term>databasenormalisatie</term>. Via een aantal stappen
            wordt de tabellenstructuur van de database vastgesteld. Na elke stap ontstaat een nieuwe
            vorm van de database die daardoor steeds verder genormaliseerd wordt. Er bestaan 5
                <term>normaalvormen</term>, waarbij de eerste normaalvorm het minst en de vijfde
            normaalvorm het meest genormaliseerd is. In de praktijk zijn de meeste databases
            genormaliseeerd tot de derde normaalvorm.</p>
        <p>Er veel voorkomende notatiewijze voor een tabel met velden en sleutel ziet er als volgt
            uit:<codeblock id="codeblock_kwd_dnb_xpb">KLANT (<u>klantnr</u>, naam, straat, huisnr, postcode, plaats)</codeblock>Hierbij
            is <varname>KLANT</varname> de naam van de tabel en <varname>klantnr</varname>,
                <varname>naam</varname>, <varname>straat</varname>, <varname>huisnr</varname>,
                <varname>postcode</varname> en <varname>plaats</varname> zijn de namen van de
            velden. De velden die de sleutel vormen worden onderstreept.</p>
    </conbody>
</concept>
