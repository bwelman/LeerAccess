<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="normalization_about" xml:lang="nl-NL">
    <title>Over normaliseren</title>
    <shortdesc>Over het waarom van normaliseren en de notatiewijze van tabellen.</shortdesc>
    <prolog>
        <critdates>
            <created date="2017-10-05"/>
            <revised modified="2017-10-05"/>
        </critdates>
        <metadata>
            <keywords>
                <indexterm>Normaliseren</indexterm>
                <indexterm>Normaalvorm</indexterm>
                <indexterm>Redundantie</indexterm>
                <indexterm>Inconsistentie</indexterm>
                <indexterm>Primaire sleutel</indexterm>
                <indexterm>Sleutel<indexterm>primair</indexterm></indexterm>
            </keywords>
        </metadata>
    </prolog>
    <conbody>
        <p>In een database worden gegevens over een bepaald onderwerp bijgehouden. Dit zou in
            principe in één grote tabel kunnen, maar dat is niet erg efficiënt. Gebruikers hebben
            vaak een specifieke informatiebehoefte, ze willen slechts bepaalde gegevens zien die aan
            bepaalde voorwaarden voldoen. het ontwerp moet er voor zorgen dat je aan de
            informatiebehoefte van de databasegebruiker kunt voldoen. Dat kan niet goed met één
            grote tabel. Ook het onderhoud van gegevens verloopt moeizaam in een dergelijke
            tabel.</p>
        <p>In een relationele database worden de gegevens gesplitst en in afzonderlijke tabellen
            ondergebracht. Door middel van sleutelvelden worden de tabellen met elkaar verbonden.
            Hierdoor kunnen gerelateerde gegevens uit verschillende tabellen opgevraagd worden.
            Hierbij is het van belang dat de gegevens goed over logisch samenhangende tabellen
            verdeeld zijn en dat de gegevens maar op één plaats worden opgeslagen, dus in één veld
            in één tabel. Ook mogen gegevens niet tegenstrijdig (<term>inconsistent</term>) zijn.
            Een voorbeeld van dit laatste is de vermelding van een niet bestaand klantnummer in een
            tabel facturen.<note type="notice">Als gegevens vaker dan keer wordt opgeslagen dan heet
                dat ook wel <term>redundantie</term>.</note></p>
        <p>Elk record moet iets unieks hebben waarmee je het record in de tabel kunt vinden. Dit
            unieke is de inhoud (waarde) van een of meerdere velden en wordt de <term>primaire
                sleutel</term> genoemd.</p>
        <p>Een goed ontwerp van de database is van belang. En dit ontwerp wordt gemaakt voordat met
            de bouw van de database begonnen wordt. Vergelijk het met de bouw van een huis waar de
            architect eerst een tekening maakt en pas dan gaat de aannemer het huis bouwen. Om tot
            een goed ontwerp te komen heeft Edgar Codd een ontwerptechniek bedacht die bekend staat
            onder de naam <term>normaliseren</term>. Via een aantal stappen wordt de
            tabellenstructuur van de database vastgesteld. Na elke stap ontstaat een nieuwe vorm van
            de database die daardoor steeds verder genormaliseerd wordt. Er bestaan 5
                <term>normaalvormen</term>, waarbij de eerste normaalvorm het minst en de vijfde
            normaalvorm het meest genormaliseerd is. In de praktijk zijn de meeste databases
            genormaliseeerd tor de derde normaalvorm.</p>
        <p>De notatiewijze voor een gegevensverzameling (tabel), de verzamelde gegevens (velden in
            de tabel) en de sleutel ziet er als volgt
            uit:<codeblock>KLANT (<u>klantnr</u>, naam, straat, huisnr, postcode, plaats)</codeblock>Hierbij
            is KLANT de naam van de gegevensverzameling, de tabelnaam dus. En klantnr, naam, straat,
            huisnr, postcode en plaats zijn de veldnamen. De onderstreepte veldnamen vormen de
            sleutel van de tabel.</p>
    </conbody>
</concept>
